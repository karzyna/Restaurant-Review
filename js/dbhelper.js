class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(e){fetch(DBHelper.DATABASE_URL).then(function(t){if(!t.ok){dbPromise.then(e=>e.transaction("objs").objectStore("objs").get("restaurant_list")).then(t=>e(null,t.data))}return t.json()}).then(function(t){dbPromise.then(e=>{const n=e.transaction("objs","readwrite");return n.objectStore("objs").put({id:"restaurant_list",data:t}),n.complete}),e(null,t)}).catch(t=>{console.log(t),e(null,{...restaurants.data[0]})})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,a)=>{if(n)t(n,null);else{const n=a.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,a)=>{if(n)t(n,null);else{const n=a.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,a)=>{if(n)t(n,null);else{const n=a.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((a,o)=>{if(a)n(a,null);else{let a=o;"all"!=e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!=t&&(a=a.filter(e=>e.neighborhood==t)),n(null,a)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),a=t.filter((e,n)=>t.indexOf(e)==n);e(null,a)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),a=t.filter((e,n)=>t.indexOf(e)==n);e(null,a)}})}static updateFavouriteStatus(e,t){console.log("changing status to:",t),fetch(`http://localhost:1337/restaurants/${e}/?is_favorite=${t}`,{method:"PUT"}).then(()=>{console.log("changed"),this.dbPromise().then(n=>{const a=n.transaction("objs","readwrite").objectStore("objs");a.get(e).then(e=>{e.is_favorite=t,a.put(e)})})})}static fetchReviews(e,t){"indexedDB"in window?idb.open("reviews",1,function(e){e.createObjectStore("reviews",{keyPath:"id"})}).then(function(n){n.transaction("reviews","readonly").objectStore("reviews").getAll().then(a=>{a&&a.length>0?t(null,a):fetch("http://localhost:1337/reviews/?restaurant_id="+e).then(e=>e.json()).then(e=>{console.log(e);var a=n.transaction("reviews","readwrite").objectStore("reviews");e.forEach(e=>{a.put(e)}),a.getAll().then(e=>{t(null,e)})}).catch(e=>{t(e,null)})})}):(console.log("IndexedDB is not supported on this browser"),fetch("http://localhost:1337/reviews/?restaurant_id="+e).then(e=>{return e.json()}).then(e=>{t(null,e)}).catch(e=>{t(e,null)}))}static sendDeferredReviews(){console.log("sending deferred reviews"),"indexedDB"in window&&idb.open("deferredReviews",1,function(e){e.createObjectStore("deferredReviews",{keyPath:"id"})}).then(function(e){var t=e.transaction("deferredReviews","readwrite").objectStore("deferredReviews");t.getAll().then(e=>{e&&e.length>0&&e.forEach(e=>{let t=e.name,n=e.rating,a=e.comments,o=e.restaurant_id,r=new FormData;r.append("name",t),r.append("rating",n),r.append("comments",a),r.append("restaurant_id",o),fetch(`${DBHelper.DATABASE_URL}/reviews`,{method:"POST",body:r}).then(e=>e.json()).then(e=>{"indexedDB"in window&&idb.open("reviews",1,function(e){e.createObjectStore("reviews",{keyPath:"id"})}).then(function(t){t.transaction("reviews","readwrite").objectStore("reviews").put(e)})}).catch(e=>{console.log(e)})})}),t.clear()})}static saveReview(e,t){e.preventDefault();let n=document.getElementById("name").value,a=document.getElementById("rating").value,o=document.getElementById("comments").value,r=document.getElementById("restaurant_id").value,i=new FormData;i.append("name",n),i.append("rating",a),i.append("comments",o),i.append("restaurant_id",r);let s=new Date;fetch(`${DBHelper.DATABASE_URL}/reviews`,{method:"POST",body:i}).then(e=>e.json()).then(e=>{"indexedDB"in window&&idb.open("reviews",1,function(e){e.createObjectStore("reviews",{keyPath:"id"})}).then(function(n){n.transaction("reviews","readwrite").objectStore("reviews").put(e),t(null,e)})}).catch(()=>{const e={id:lastId+1,restaurant_id:r,name:n,rating:a,comments:o,updatedAt:s,createdAt:s};lastId=e.id,console.log("offline DB store"),"indexedDB"in window?idb.open("deferredReviews",1,function(e){e.createObjectStore("deferredReviews",{keyPath:"id"})}).then(function(n){n.transaction("deferredReviews","readwrite").objectStore("deferredReviews").put(e),t(null,e)}):t("Your browser does not support this cool feature :(",null)})}static fetchReviewsByRestaurantId(e,t){DBHelper.fetchReviews(e,(e,n)=>{if(e)t(e,null);else{n?t(null,n):t("Restaurant does not have reviews yet",null)}})}static getStoreObjectById(e,t,n){return this.dbPromise().then(function(a){if(!a)return;return a.transaction(e).objectStore(e).index(t).getAll(n)})}static addReview(e){console.log("inside",e);let t={name:"addReview",data:e,object_type:"review"};if(!navigator.onLine&&"addReview"===t.name)return void DBHelper.sendDataWhenOnline(t);let n={name:e.name,rating:parseInt(e.rating),opinion:e.opinion,restaurant_id:parseInt(e.restaurant_id)};console.log("Sending review: ",n);var a={method:"POST",body:JSON.stringify(n),headers:new Headers({"Content-Type":"application/json"})};console.log(a),fetch("http://localhost:1337/reviews",a).then(e=>{const t=e.headers.get("content-type");return t&&-1!==t.indexOf("application.json")?responses.json():"API call successfull"}).then(e=>{console.log("Fetch  successful!")}).catch(e=>console.log("error: ",e))}static sendDataWhenOnline(e){console.log("Offline OBJ",e),localStorage.setItem("data",JSON.stringify("offline_obj.data")),console.log(`Local Storage: ${e.object_type} stored`),window.addEventListener("online",t=>{console.log("Browser: Online again!");let n=JSON.parse(localStorage.getItem("data"));console.log("updating and cleaning ui"),[...document.querySelectorAll(".reviews_offline")].forEach(e=>{e.classList.remove("reviews_offline"),e.querySelector(".offline_label").remove()}),null!==n&&(console.log(n),"addReview"===e.name&&DBHelper.addReview(e.data),console.log("LocalState: data sent to api"),localStorage.removeItem("data"),console.log(`Local Storage: ${e.object_type} removed`))})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.jpg`}static altTextForRestaurant(e){return`${e.name} Restaurant`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static removeMapsTabOrder(){document.querySelectorAll("#map div, #map iframe, #map area, #map a, #map button").forEach(e=>{e.setAttribute("tabindex","-1")})}}